{"version":3,"file":"extension.js","mappings":"iwBAAA,kBAKA,yBAESA,WAAgC,GAChCC,MACAC,uBAAoD,IAAIC,EAAOC,aACvDC,sBAA4CC,KAAKJ,uBAAuBK,MAExF,WAAAC,GACCF,KAAKL,MAAQ,0CAEbE,EAAOM,UAAUC,0BAA0BC,IAC1CL,KAAKJ,uBAAuBU,MAAM,GAEpC,CAEO,iBAAAC,CAAkBC,GACxB,GAAIX,EAAOM,UAAUM,iBAAiB,mBAAmBC,IAAI,kBAAkB,GAAO,CACrFV,KAAKN,WAAa,GAClB,MAAMC,EAAQ,IAAIgB,OAAOX,KAAKL,OACxBiB,EAAOJ,EAASK,UACtB,IAAIC,EACJ,IAAIC,EACJ,IAAIlB,EAAOmB,OAAOC,iBAGjB,MAAO,GAGR,IALCF,EAAelB,EAAOmB,OAAOC,iBAAiBT,SAASU,IAAIC,KAKpB,QAAhCL,EAAUnB,EAAMyB,KAAKR,KAAiB,CAC7C,MAAMS,EAAOb,EAASc,OAAOd,EAASe,WAAWT,EAAQU,OAAOH,MAC1DI,EAAUJ,EAAKT,KAAKa,QAAQX,EAAQ,IACpCY,EAAW,IAAI7B,EAAO8B,SAASN,EAAKO,WAAYH,GAChDI,EAAQrB,EAASsB,uBAAuBJ,EAAU,IAAIf,OAAOX,KAAKL,QACxE,GAAIkC,EAAO,CACV,IAAIE,EAAyBjB,EAAQ,GAAG,GAAGkB,cAAgBlB,EAAQ,GAAGmB,MAAM,GACxEC,EAAW,IAAIrC,EAAOsC,SACzBN,EACA,CACCO,MAAO,cACPC,QAAS,0BACTC,QAAS,iCACTC,UAAW,CAACxB,EAAe,MAAQgB,EAAiB,MAAQjB,EAAQ,MAGtEd,KAAKN,WAAW8C,KAAKN,EACtB,CACD,CACA,OAAOlC,KAAKN,UACb,CACA,MAAO,EACR,CAEO,eAAA+C,CAAgBP,GACtB,OAAIrC,EAAOM,UAAUM,iBAAiB,mBAAmBC,IAAI,kBAAkB,GACvEwB,EAED,IACR,E,UC9DDQ,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,gB,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUI,KAAKT,EAAOC,QAASD,EAAQA,EAAOC,QAASG,GAGpEJ,EAAOC,OACf,C,yHCnBA,eACA,SAKA,IAAIS,EAA4B,GAEhC,SAAgBC,EAAgBC,EAA2BC,GAE1D,IAAIC,GAASC,EADI,iBACK,YAAmBH,EAAQI,aAAavC,KAAxC,sCAAkGoC,EAAK,GAAK,KAAOA,EAAK,GAAK,IAAMA,EAAK,IAAII,WAAWC,OAC7K,EAAA5C,OAAO6C,uBAAuBL,EAC/B,CAJA,oBAQA,oBAAyBF,GACxB,MAAMQ,EAAmB,IAAI,EAAAC,iBAE7B,EAAAC,UAAUC,yBAAyB,IAAKH,GAExC,EAAAI,SAASC,gBAAgB,kCAAkC,KAC1D,EAAAhE,UAAUM,iBAAiB,mBAAmB2D,OAAO,kBAAkB,GAAM,EAAK,IAOnF,EAAAF,SAASC,gBAAgB,kCAAmCE,IAC3D,IAAId,EAAgBc,EAAIC,MAAM,OAC9BjB,EAAgBC,EAASC,GACzB,EAAAvC,OAAO6C,uBAAuB,kBAAkB,GAElD,EAGA,wBACKT,GACHA,EAAYmB,SAAQC,GAAQA,EAAKC,YAElCrB,EAAc,EACf,C","sources":["webpack://auto-ut/./src/CodelensProvider.ts","webpack://auto-ut/external commonjs \"vscode\"","webpack://auto-ut/external node-commonjs \"child_process\"","webpack://auto-ut/webpack/bootstrap","webpack://auto-ut/./src/extension.ts"],"sourcesContent":["import * as vscode from 'vscode';\r\n\r\n/**\r\n * CodelensProvider\r\n */\r\nexport class CodelensProvider implements vscode.CodeLensProvider {\r\n\r\n\tprivate codeLenses: vscode.CodeLens[] = [];\r\n\tprivate regex: RegExp;\r\n\tprivate _onDidChangeCodeLenses: vscode.EventEmitter<void> = new vscode.EventEmitter<void>();\r\n\tpublic readonly onDidChangeCodeLenses: vscode.Event<void> = this._onDidChangeCodeLenses.event;\r\n\r\n\tconstructor() {\r\n\t\tthis.regex = /func \\(s \\*([a-zA-Z]*)\\) ([a-zA-Z]*)\\(/g;\r\n\r\n\t\tvscode.workspace.onDidChangeConfiguration((_) => {\r\n\t\t\tthis._onDidChangeCodeLenses.fire();\r\n\t\t});\r\n\t}\r\n\r\n\tpublic provideCodeLenses(document: vscode.TextDocument): vscode.CodeLens[] | Thenable<vscode.CodeLens[]> {\r\n\t\tif (vscode.workspace.getConfiguration(\"codelens-sample\").get(\"enableCodeLens\", true)) {\r\n\t\t\tthis.codeLenses = [];\r\n\t\t\tconst regex = new RegExp(this.regex);\r\n\t\t\tconst text = document.getText();\r\n\t\t\tlet matches;\r\n\t\t\tvar current_file = \"\";\r\n\t\t\tif (vscode.window.activeTextEditor){\r\n\t\t\t\tcurrent_file = vscode.window.activeTextEditor.document.uri.path;\r\n\t\t\t} else {\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\r\n\t\t\twhile ((matches = regex.exec(text)) !== null) {\r\n\t\t\t\tconst line = document.lineAt(document.positionAt(matches.index).line);\r\n\t\t\t\tconst indexOf = line.text.indexOf(matches[0]);\r\n\t\t\t\tconst position = new vscode.Position(line.lineNumber, indexOf);\r\n\t\t\t\tconst range = document.getWordRangeAtPosition(position, new RegExp(this.regex));\r\n\t\t\t\tif (range) {\r\n\t\t\t\t\tvar interface_name :string = matches[1][0].toUpperCase() + matches[1].slice(1);\r\n\t\t\t\t\tvar codeLens = new vscode.CodeLens(\r\n\t\t\t\t\t\trange, \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttitle: \"Generate UT\",\r\n\t\t\t\t\t\t\ttooltip: \"Automatic UT generation\",\r\n\t\t\t\t\t\t\tcommand: \"codelens-sample.codelensAction\",\r\n\t\t\t\t\t\t\targuments: [current_file + \":::\" + interface_name + \":::\" + matches[2]]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t\tthis.codeLenses.push(codeLens);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this.codeLenses;\r\n\t\t}\r\n\t\treturn [];\r\n\t}\r\n\r\n\tpublic resolveCodeLens(codeLens: vscode.CodeLens,) {\r\n\t\tif (vscode.workspace.getConfiguration(\"codelens-sample\").get(\"enableCodeLens\", true)) {\r\n\t\t\treturn codeLens;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n","module.exports = require(\"vscode\");","module.exports = require(\"child_process\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\n// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport { ExtensionContext, languages, commands, Disposable, workspace, window } from 'vscode';\nimport { CodelensProvider } from './CodelensProvider';\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\n\nlet disposables: Disposable[] = [];\n\nexport function auto_ut_trigger(context: ExtensionContext, args: string[]) {\n\tconst execSync = require(\"child_process\").execSync; \n\tvar output = execSync('python3 ' + '\"' + context.extensionUri.path + '/python-scripts/auto_generate.py' + '\" ' + '\"'  + args[0] + '\" ' + args[1] + ' ' + args[2]).toString().trim();\n\twindow.showInformationMessage(output);\n}\n\n\n\nexport function activate(context: ExtensionContext) {\n\tconst codelensProvider = new CodelensProvider();\n\n\tlanguages.registerCodeLensProvider(\"*\", codelensProvider);\n\n\tcommands.registerCommand(\"codelens-sample.enableCodeLens\", () => {\n\t\tworkspace.getConfiguration(\"codelens-sample\").update(\"enableCodeLens\", true, true);\n\t});\n\n\t// commands.registerCommand(\"codelens-sample.disableCodeLens\", () => {\n\t// \tworkspace.getConfiguration(\"codelens-sample\").update(\"enableCodeLens\", false, true);\n\t// });\n\n\tcommands.registerCommand(\"codelens-sample.codelensAction\", (arg: string) => {\n\t\tvar args :string[]= arg.split(\":::\");\n\t\tauto_ut_trigger(context, args);\n\t\twindow.showInformationMessage(`Hello from Niru`);\n\t});\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {\n\tif (disposables) {\n\t\tdisposables.forEach(item => item.dispose());\n\t}\n\tdisposables = [];\n}\n"],"names":["codeLenses","regex","_onDidChangeCodeLenses","vscode","EventEmitter","onDidChangeCodeLenses","this","event","constructor","workspace","onDidChangeConfiguration","_","fire","provideCodeLenses","document","getConfiguration","get","RegExp","text","getText","matches","current_file","window","activeTextEditor","uri","path","exec","line","lineAt","positionAt","index","indexOf","position","Position","lineNumber","range","getWordRangeAtPosition","interface_name","toUpperCase","slice","codeLens","CodeLens","title","tooltip","command","arguments","push","resolveCodeLens","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call","disposables","auto_ut_trigger","context","args","output","execSync","extensionUri","toString","trim","showInformationMessage","codelensProvider","CodelensProvider","languages","registerCodeLensProvider","commands","registerCommand","update","arg","split","forEach","item","dispose"],"sourceRoot":""}